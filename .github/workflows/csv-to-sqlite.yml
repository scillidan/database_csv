name: Process CSV Files and Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        asset:
          - { path: 'output/reference.db', name: 'reference.db' }
          - { path: 'output/resource.db', name: 'resource.db' }
          - { path: 'output/asset.db', name: 'asset.db' }
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install sqlite-utils
      run: pip install sqlite-utils

    - name: Process CSVs
      run: |
        mkdir -p output
        for file in reference/*.csv; do
          tablename=$(basename "$file" .csv)
          sqlite-utils insert output/reference.db "$tablename" "$file" --csv
        done
        for file in resource/*.csv; do
          tablename=$(basename "$file" .csv)
          sqlite-utils insert output/resource.db "$tablename" "$file" --csv
        done
        for file in asset/*.csv; do
          tablename=$(basename "$file" .csv)
          sqlite-utils insert output/asset.db "$tablename" "$file" --csv
        done

    - name: Get Commit Date
      id: get_date
      run: echo "date=$(date -u +'%Y-%m-%d_%H-%M')" >> $GITHUB_ENV

    - name: Check if Release Exists
      id: check_release
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.date }}")
        echo "release_exists=$response" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      if: env.release_exists != '200' # Only create if it doesn't exist
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.date }}
        release_name: Automated Release ${{ env.date }}

    - name: Upload db files
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ matrix.asset.path }} # Correctly referenced
        asset_name: ${{ matrix.asset.name }} # Correctly referenced
        asset_content_type: application/octet-stream